<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!--给Car和Person类配置bean的属性-->

    <!--配置bean
        class：bean的全类名，通过反射的方式在IOC中创建bean，所以要求bean中必须有无参的构造器
        id：标识容器中的bean，id唯一
    -->
    <!--Spring 自动匹配合适的构造器
        通过索引值index指定参数位置
        通过类型type区分重载的构造器
    -->
    <bean id="car1" class="beanAttribute.Car">
        <constructor-arg value="Audi" type="java.lang.String" index="0"></constructor-arg>
        <constructor-arg value="Shanghai" type="java.lang.String" index="1"></constructor-arg>
        <constructor-arg value="300000" type="double" index="2"></constructor-arg>
    </bean>

    <bean id="car2" class="beanAttribute.Car">
        <constructor-arg value="Dazhong" type="java.lang.String" index="0"></constructor-arg>
    <!-- 若字面值中包含特殊字符，可以使用 <![CDATA[]]> 把字面值包裹起来。-->
        <constructor-arg type="java.lang.String" index="1">
            <value><![CDATA[Shanghai^]]></value>
        </constructor-arg>
        <constructor-arg type="int" index="2">
    <!-- 可以使用<value> 子节点指定属性值  -->
            <value>250</value>
        </constructor-arg>
    </bean>

    <bean id="car3" class="beanAttribute.Car">
        <constructor-arg value="benchi" type="java.lang.String" index="0"></constructor-arg>
        <constructor-arg value="Beijing" type="java.lang.String" index="1"></constructor-arg>
        <constructor-arg value="400000" type="double" index="2"></constructor-arg>
    </bean>

    <!-- ref引用外部已经声明的bean，建立bean之间的依赖关系-->
    <bean id="person" class="beanAttribute.Person">
        <property name="name" value="wjy"></property>
        <property name="age" value="23"></property>
        <property name="car" ref="car1"></property>
    </bean>

    <!-- 使用内部bean创建一个有car的person   -->
    <bean id="person2" class="beanAttribute.Person">
        <property name="name" value="zjl"></property>
        <property name="age" value="35"></property>
        <property name="car">
            <bean class="beanAttribute.Car">
                <constructor-arg name="brand" value="baoma"></constructor-arg>
                <constructor-arg name="corp" value="BWM"></constructor-arg>
                <constructor-arg name="price" value="250000.00"></constructor-arg>
            </bean>
        </property>
    </bean>

<!--第三个人：赋值null-->
    <bean id="person3" class="beanAttribute.Person">
        <constructor-arg value="dzq" ></constructor-arg>
        <constructor-arg value="27"></constructor-arg>
        <constructor-arg><null/></constructor-arg>
    </bean>

<!--第四个人：测试级联属性赋值-->
    <bean id="person4" class="beanAttribute.Person">
        <constructor-arg value="dzq"></constructor-arg>
        <constructor-arg value="27"></constructor-arg>
        <constructor-arg ref="car3"></constructor-arg>
        <property name="car.maxSpeed" value="250"></property>
    </bean>

<!--第五个人：测试集合属性-->
<!--    <bean id="person5" class="beanCollection.Person">
        <constructor-arg value="dzq"></constructor-arg>
        <constructor-arg value="27"></constructor-arg>
        <constructor-arg>
            <list>
                <ref bean="car1"></ref>
                <ref bean="car2"></ref>
                <ref bean="car3"></ref>
            </list>
        </constructor-arg>
    </bean>-->
<!--    另一种写法-->
    <bean id="person5" class="beanCollection.Person">
        <property name="name" value="dzq"></property>
        <property name="age" value="27"></property>
        <property name="cars">
            <list>
                <ref bean="car1"></ref>
                <ref bean="car2"></ref>
                <ref bean="car3"></ref>
            </list>
        </property>
    </bean>

<!--第六个人：测试map集合属性-->
    <bean id="person6" class="beanCollection.NewPerson" >
        <property name="name" value="dzq"></property>
        <property name="age" value="27"></property>
        <property name="cars">
            <map>
                <entry key="AA" value-ref="car1"></entry>
                <entry key="BB" value-ref="car2"></entry>
            </map>
        </property>
    </bean>
    
<!--配置数据源：测试props集合属性-->
    <bean id="dataSource" class="beanCollection.Datasource">
        <property name="properties">
            <props>
                <prop key="user">user</prop>
                <prop key="password">123456</prop>
                <prop key="jdbcUrl">jdbc:mysql:///test</prop>
                <prop key="driverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>

<!--第七个人：测试外部集合-->
    <util:list id="cars">
        <ref bean="car1"></ref>
        <ref bean="car2"></ref>
    </util:list>

    <bean id="person7" class="beanCollection.Person">
        <property name="name" value="dzq"></property>
        <property name="age" value="27"></property>
        <property name="cars" ref="cars"></property>
    </bean>

<!--第八个人：使用p命名空间-->
    <bean id="person8" class="beanCollection.Person" p:name="dzq" p:age="27" p:cars-ref="cars"></bean>

</beans>